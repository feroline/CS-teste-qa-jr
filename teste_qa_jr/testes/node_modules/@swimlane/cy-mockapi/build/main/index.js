"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installPlugin = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const glob = __importStar(require("glob"));
const slash_1 = __importDefault(require("slash"));
const extGlobs = '{json,txt}';
const fileGlob = '{*.,}{get,post,put,delete}**';
const installPlugin = (on, config) => {
    const mocksCache = new Map();
    on('task', {
        getMocks: async (options) => {
            const mocksFolder = options.mocksFolder || 'mocks';
            const cwd = (0, path_1.resolve)(config.fixturesFolder, mocksFolder);
            const apiPath = options.apiPath || '/api/';
            const cache = 'cache' in options ? options.cache : true;
            if (cache && mocksCache.has(mocksFolder))
                return mocksCache.get(mocksFolder);
            const mockFiles = [];
            glob
                .sync(`**/${fileGlob}.${extGlobs}`, { cwd })
                .forEach((path) => {
                const unescapedPath = path.replace(/__/g, '*').replace(/--/g, '?');
                let { dir, name } = (0, path_1.parse)(unescapedPath);
                if (name.includes('.')) {
                    const s = name.split('.');
                    dir += s[0];
                    name = s[1];
                }
                const sp = name.split('-');
                let method = sp[0];
                const alt = sp[1];
                method = method.toUpperCase();
                const fixture = (0, slash_1.default)((0, path_1.join)(mocksFolder, path));
                const url = (0, slash_1.default)((0, path_1.join)(apiPath, dir));
                const alias = alt ? `${method}:${dir}:${alt}` : `${method}:${dir}`;
                mockFiles.push({
                    alt,
                    alias,
                    matcher: {
                        method,
                        url,
                    },
                    handler: {
                        fixture,
                    },
                });
            });
            glob.sync('**/options.json', { cwd }).forEach((path) => {
                const raw = (0, fs_1.readFileSync)((0, path_1.join)(cwd, path));
                const opts = JSON.parse(String(raw));
                const { dir } = (0, path_1.parse)(path);
                const dirEscaped = dir.replace(/__/g, '*');
                opts.forEach((opt) => {
                    opt.matcher || (opt.matcher = {});
                    opt.handler || (opt.handler = {});
                    const { matcher, handler } = opt;
                    matcher.method || (matcher.method = 'GET');
                    matcher.method = matcher.method.toUpperCase();
                    if (!(matcher.url && matcher.url.startsWith(apiPath))) {
                        matcher.url = (0, path_1.join)(apiPath, dirEscaped + (matcher.url || ''));
                    }
                    matcher.url = (0, slash_1.default)(matcher.url);
                    if (!handler.body && !handler.fixture) {
                        handler.fixture = matcher.method.toLowerCase();
                    }
                    if (handler.fixture) {
                        handler.fixture = (0, slash_1.default)((0, path_1.join)(mocksFolder, dir, handler.fixture));
                    }
                    opt.alias || (opt.alias = `${matcher.method}:${matcher.url.replace((0, slash_1.default)(apiPath), '')}`);
                    mockFiles.push(opt);
                });
            });
            mocksCache.set(mocksFolder, mockFiles);
            return mockFiles;
        },
    });
};
exports.installPlugin = installPlugin;
