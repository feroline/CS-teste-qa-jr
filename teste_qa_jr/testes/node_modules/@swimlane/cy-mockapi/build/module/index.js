import { resolve, parse, join } from 'path';
import { readFileSync } from 'fs';
import * as glob from 'glob';
import slash from 'slash';
const extGlobs = '{json,txt}';
const fileGlob = '{*.,}{get,post,put,delete}**';
export const installPlugin = (on, config) => {
    const mocksCache = new Map();
    on('task', {
        getMocks: async (options) => {
            const mocksFolder = options.mocksFolder || 'mocks';
            const cwd = resolve(config.fixturesFolder, mocksFolder);
            const apiPath = options.apiPath || '/api/';
            const cache = 'cache' in options ? options.cache : true;
            if (cache && mocksCache.has(mocksFolder))
                return mocksCache.get(mocksFolder);
            const mockFiles = [];
            glob
                .sync(`**/${fileGlob}.${extGlobs}`, { cwd })
                .forEach((path) => {
                const unescapedPath = path.replace(/__/g, '*').replace(/--/g, '?');
                let { dir, name } = parse(unescapedPath);
                if (name.includes('.')) {
                    const s = name.split('.');
                    dir += s[0];
                    name = s[1];
                }
                const sp = name.split('-');
                let method = sp[0];
                const alt = sp[1];
                method = method.toUpperCase();
                const fixture = slash(join(mocksFolder, path));
                const url = slash(join(apiPath, dir));
                const alias = alt ? `${method}:${dir}:${alt}` : `${method}:${dir}`;
                mockFiles.push({
                    alt,
                    alias,
                    matcher: {
                        method,
                        url,
                    },
                    handler: {
                        fixture,
                    },
                });
            });
            glob.sync('**/options.json', { cwd }).forEach((path) => {
                const raw = readFileSync(join(cwd, path));
                const opts = JSON.parse(String(raw));
                const { dir } = parse(path);
                const dirEscaped = dir.replace(/__/g, '*');
                opts.forEach((opt) => {
                    opt.matcher ||= {};
                    opt.handler ||= {};
                    const { matcher, handler } = opt;
                    matcher.method ||= 'GET';
                    matcher.method = matcher.method.toUpperCase();
                    if (!(matcher.url && matcher.url.startsWith(apiPath))) {
                        matcher.url = join(apiPath, dirEscaped + (matcher.url || ''));
                    }
                    matcher.url = slash(matcher.url);
                    if (!handler.body && !handler.fixture) {
                        handler.fixture = matcher.method.toLowerCase();
                    }
                    if (handler.fixture) {
                        handler.fixture = slash(join(mocksFolder, dir, handler.fixture));
                    }
                    opt.alias ||= `${matcher.method}:${matcher.url.replace(slash(apiPath), '')}`;
                    mockFiles.push(opt);
                });
            });
            mocksCache.set(mocksFolder, mockFiles);
            return mockFiles;
        },
    });
};
